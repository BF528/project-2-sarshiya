import pandas

sample_csv = pandas.read_csv('sample_sheet.csv', index_col='name')
CONDITIONS = set(sample_csv['condition'].tolist())
REPS = set(sample_csv['replicate'].tolist())

rule all:
	input:
		expand("results/annotated_peaks.txt", condition=CONDITIONS, replicate=REPS),
		expand("results/motif_analysis", condition=CONDITIONS, replicate=REPS)

rule make_tag_dir:
	input:
		bam = "results/{condition}_{replicate}.sorted.bam"
	output:
		directory("results/{condition}_{replicate}_tagDir")
	conda:
		'envs/homer_env.yml'
	shell:
		"""
		makeTagDirectory {output} {input.bam}
		"""

rule findPeaks:
    input:
        RUNX1 = 'results/RUNX1sample_{replicate}_tagDir/',
        INP = 'results/INPsample_{replicate}_tagDir/'
    output:
        peaks = "results/peaks_{replicate}.txt"
    conda:
        'envs/homer_env.yml'
    shell:
        """
        findPeaks {input.RUNX1} -i {input.INP} -style factor -o {output.peaks}
        """

rule convertPeakFiles:
	input:
		txt = "results/peaks_{replicate}.txt"
	output:
		bed = "results/peaks_{replicate}.bed"
	conda:
		'envs/homer_env.yml'
	shell:
		"""
		pos2bed.pl {input.txt} > {output.bed}
		"""

rule intersect_peaks:
	input:
		peaks1 = "results/peaks_rep1.bed",
		peaks2 = "results/peaks_rep2.bed"

	output:
		bed = "results/reproducible_peaks.bed"
	conda:
		'envs/bedtools_env.yml'
	shell:
		"""
		bedtools intersect -a {input.peaks1} -b {input.peaks2} > {output.bed}
		"""

rule filter_blacklist:
	input:
		peaks = "results/reproducible_peaks.bed",
		blacklist="results/hg38-blacklist.v2.bed"
	output:
		bed="results/filtered_reproducible_peaks.bed"
	conda:
		'envs/bedtools_env.yml'
	shell:
		"""
		bedtools intersect -a {input.peaks} -b {input.blacklist} -v > {output.bed}
		"""

rule unzip_gtf:
	input:
		"results/gencode.v45.primary_assembly.annotation.gtf.gz"
	output:
		"results/unzipped_gencode.v45.primary_assembly.annotation.gtf"
	shell:
		"""
		gunzip -c {input} > {output}
		"""

rule annotate_peaks:
	input:
		peaks="results/filtered_reproducible_peaks.bed",
		gtf= "results/unzipped_gencode.v45.primary_assembly.annotation.gtf"
	output:
		"results/annotated_peaks.txt"
	conda:
		'envs/homer_env.yml'
	shell:
		"""
		annotatePeaks.pl {input.peaks} hg38 -gtf {input.gtf} > {output}
		"""

rule unzip_genome:
	input:
		"results/GRCh38.primary_assembly.genome.fa.gz"
	output:
		"results/unzipped_GRCh38.primary_assembly.genome.fa"
	shell:
		"""
		gunzip -c {input} > {output}
		"""

rule motifs:
    input:
        peaks = "results/filtered_reproducible_peaks.bed",
        genome = "results/unzipped_GRCh38.primary_assembly.genome.fa"
    output:
        directory("results/motif_analysis")
    conda:
        'envs/homer_env.yml'
    shell:
        """
        findMotifsGenome.pl {input.peaks} {input.genome} {output} -size 200
        """
