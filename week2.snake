import pandas

sample_csv = pandas.read_csv('sample_sheet.csv', index_col='name')
CONDITIONS = set(sample_csv['condition'].tolist())
REPS = set(sample_csv['replicate'].tolist())


rule all:
	input:
		expand("results/{condition}_{rep}.bam", condition = CONDITIONS, rep = REPS),
		expand("results/{condition}_{rep}.sorted.bam", condition=CONDITIONS, rep=REPS),
		expand("results/{condition}_{rep}.sorted.bam.bai", condition=CONDITIONS, rep=REPS),
		expand("results/{condition}_{rep}.flagstat.txt", condition=CONDITIONS, rep=REPS),
		expand("results/{condition}_{rep}.bw", condition=CONDITIONS, rep=REPS),
		"results/multiBigWigSummary_results.npz",
		"results/multiqc_report.html",
		"results/plotCorrelation_heatmap.png"

rule bowtie2_align:
    input:
        index="results/human_genome_index/genome_index.1.bt2",
        trimmed_fastq="results/{condition}_{rep}.trimmed.fastq.gz"
    output:
        bam="results/{condition}_{rep}.bam"
    threads: 16
    params:
        dir = "results/human_genome_index/genome_index"
    conda:
        'envs/bowtie2_env.yml'
    shell:
        """
        bowtie2 -x {params.dir} -U {input.trimmed_fastq} | samtools view -bS - > {output.bam}
        """

rule samtools_sort:
	input:
		bam="results/{condition}_{rep}.bam"
	output:
		sorted_bam="results/{condition}_{rep}.sorted.bam"
	conda:
		'envs/samtools_env.yml'
	shell:
		"""
		samtools sort -o {output.sorted_bam} {input.bam}
		"""

rule samtools_idx:
	input:
		sorted_bam="results/{condition}_{rep}.sorted.bam"
	output:
		bam_index="results/{condition}_{rep}.sorted.bam.bai"
	conda:
		'envs/samtools_env.yml'
	shell:
		"""
		samtools index {input.sorted_bam}
		"""
rule flagstats:
	input:
		bam="results/{condition}_{rep}.sorted.bam"
	output:
		flagstat="results/{condition}_{rep}.flagstat.txt"
	conda:
		'envs/samtools_env.yml'
	shell:
		"""
		samtools flagstat {input.bam} > {output.flagstat}
		"""

rule multiqc:
	input:
		multiqc = expand("results/{condition}_{rep}.flagstat.txt", condition=CONDITIONS, rep=REPS)
	output:
		html="results/multiqc_report.html"
	conda:
		'envs/multiqc_env.yml'
	shell:
		"""
		 multiqc -o results/ {input.multiqc}
		"""

rule bamCoverage:
	input:
		bam="results/{condition}_{rep}.sorted.bam"
	output:
		bigwig="results/{condition}_{rep}.bw"
	threads: 4
	conda:
		'envs/deeptools_env.yml'
	shell:
		"""
		bamCoverage -b {input.bam} -o {output.bigwig} -p {threads}
		"""

rule multiBwSummary:
	input:
		bw_files=expand("results/{condition}_{rep}.bw", condition=CONDITIONS, rep=REPS)
	output:
		summary="results/multiBigWigSummary_results.npz"
	conda:
		'envs/deeptools_env.yml'
	shell:
		"""
		multiBigwigSummary bins -b {input.bw_files} -o {output.summary}
		"""

rule plotCorrelation:
	input:
		summary="results/multiBigWigSummary_results.npz"
	output:
		plot="results/plotCorrelation_heatmap.png"
	conda:
		'envs/deeptools_env.yml'
	shell:
		"""
		plotCorrelation -in {input.summary} -c pearson -p heatmap -o {output.plot}
		"""
