import pandas

sample_csv = pandas.read_csv('sample_sheet.csv', index_col='name')
CONDITIONS = set(sample_csv['condition'].tolist())
REPS = set(sample_csv['replicate'].tolist())

rule all:
	input:
		expand('results/{condition}_{rep}.fastqc.zip', condition=CONDITIONS, rep=REPS)

rule wget_files:
	output:
		'samples/{condition}_{rep}.fastq.gz'
	params:
		link = lambda wildcards: sample_csv.loc['{}_{}'.format(wildcards.condition, wildcards.rep), 'ftp_link'],
		renamed = lambda wildcards: 'samples/{}_{}.fastq.gz'.format(wildcards.condition, wildcards.rep)
	shell:
		'''
		wget -O {params.renamed} {params.link} 
		'''

rule bowtie2_build_gencode:
	input:
		'results/GRCh38.primary_assembly.genome.fa.gz'
	output:
		'results/bowtie2_index'
	params:
		threads=16
	conda:
		'envs/bowtie2_env.yml'
	shell:
		"""
		bowtie2-build --threads {params.threads} {input} {output}
		"""

rule fastqc:
	input:
		 expand('samples/{condition}_{rep}.fastq.gz', condition=CONDITIONS, rep=REPS)
	output:
		'results/{condition}_{rep}.fastqc.zip'
	params:
		threads=4
	conda:
		'envs/fastqc_env.yml'
	shell:
		"""
		fastqc -t {params.threads} -o results {input}
		"""

rule trimomatic:
	input:
		"samples/{condition}_{rep}.fastq.gz"
	output:
		"results/{condition}_{rep}.trimmed.fastq.gz"
	params :
		adapters="results/TruSeq3-SE.fa",
		threads=8
	conda:
		'envs/trimmomatic_env.yml'
	shell:
		"""
		trimmomatic SE -threads {threads} {input} {output} ILLUMINACLIP:{params.adapters}:2:30:10 LEADING:3 TRAILING:3 SLIDINGWINDOW:4:15
		"""

